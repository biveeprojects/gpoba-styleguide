/* =============================================================================
// Grid layout classes
// ===========================================================================*/

/*doc
---
title: Grids
name: grids
category: Layout
---

Grids

```html_example
<a href="#" class="button l-abs top right">Button @ top right</a>
```

*/

@import "../core/all";

/* Gutters
// -------------------------------------------------------------------------- */

$gutter: $l-margin; // local reference to global spacing -> see layout/spacing
$gutter-outside: $l-margin--wide; // local reference to global spacing -> see layout/spacing

@function add_outside_gutters($w) {
    // compensate for outside margins (ie padding) and split gutters
    @return ($w + ($gutter-outside * 2));
}

/* Grid columns
// -------------------------------------------------------------------------- */

// scale for ratio-based grids and/or type
// -> http://alistapart.com/article/content-out-layout
// $grid-scale: 1 1.618 2.618 4.236 6.854 11.089 17.942 29.030 !default;

// @function ms($n) {
//     @return nth($grid-scale, $n);
// }

$ms-base: 1;
$ms-ratio: 1.2;

@debug ms-list(1, 10, $ms-base, $ms-ratio);

$grid-default: ms(1) ms(4);

// get the total of the columns
@function column-sum($grid) {
    $sum: 0;
    @each $col in $grid {
        $sum: $sum + $col;
    }
    @return $sum;
}
// @debug column-sum($grid-default);

// calculate column width as a percentage
@function column-w($loc, $grid: $grid-default) {
    // @debug($grid);
    $col: nth($grid, $loc);
    $total: column-sum($grid);
    @return percentage($col/$total);
}

// create a column in a grid
// @PARAM (number) $loc: the column number where this element will live
// @PARAM (list) $grid: the relative widths of columns in the grid
// @PARAM (number) $gutter: width of the gutters b/n columns (note this uses split gutters)
// @PARAM (boolean) $last_fill: should the last item expand to fill the remaining space? defaults to true.
// -> requires SassyLists, Modernizr and modernizr-mixin libraries
@mixin column($loc, $grid: $grid-default, $gutter: $gutter, $last_fill: true, $split: true) {
    @include type-size-default;
    display: inline-block;
    width: column-w($loc, $grid);

    @if ($split == true) {
        padding-left: ($gutter/2);
        padding-right: ($gutter/2);
    } @else {
        padding-right: $gutter;
    }

    // adjust padding if this is the first or last element
    &:first-child { padding-left: 0; }
    &:last-child { padding-right: 0; }

    // override inline block if flexbox is supported
    @include yep(flexbox) {
        display: block;

        // if this is the last column, tell the element to fill the remaining space
        // -> only works with flexbox. otherwise it just uses percentage width.
        @if ($last_fill == true) {
            @if ($loc == length($grid)) {
                @include flex(1);
                width: auto;
            }
        }
    }
}

// A wrapper for grid
@mixin column-wrapper($display: block, $breakpoint: 'small') {
    display: $display;
    font-size: 0;

    @include media(">#{$breakpoint}") {
        @include yep(flexbox) {
            @include display(flex);
            // @include align-items(flex-start);
        }
    }
}

@mixin kill-column-wrapper($display: block) {
    @include type-size-default;
    display: $display;
}

/* Utilities
// -------------------------------------------------------------------------- */

// .l-cols-1-4 {
//     $grid: ms(1) ms(4);
//     @include column-wrapper;

//     > .l-col-1 {
//         display: block;

//         @include media(">small") {
//             @include column(1, $grid);
//         }
//     }

//     > .l-col-2 {
//         display: block;

//         @include media(">small") {
//             @include column(2, $grid);
//         }
//     }
// }

// .l-cols-1-6 {
//     $grid: ms(1) ms(6);
//     $grid--wider: ms(1) ms(4);
//     @include column-wrapper($breakpoint: 'xsmall');

//     > .l-col-1 {
//         display: block;

//         @include media(">xsmall") {
//             @include column(1, $grid--wider);
//         }

//         @include media(">small") {
//             width: column-w(1, $grid);
//         }
//     }

//     > .l-col-2 {
//         display: block;

//         @include media(">xsmall") {
//             @include column(2, $grid--wider);
//         }

//         @include media(">small") {
//             width: column-w(2, $grid);
//         }
//     }
// }

// // Vertically center the columns
// .l-cols--vertically_centered { @include align-items(center); }

// .l-cols--centered {  }

// // Limit the maximum width of a column
// // -> good for icons, stuff that needs to stay small
// .l-col--limited { @include rem(max-width, 200px); }
