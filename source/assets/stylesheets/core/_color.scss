/* ==========================================================================
//  Global color styles
// -> base colors are set here on global elements, but modules apply their own
// -> refer to colors ONLY via the $theme maps
// ========================================================================== */

/*doc
---
title: Color
name: color
category: core
---

Some functions and globals to keep the color scheme DRY and easy to manage in one place. Color for the entire site is handled through structured SASS maps, assigning each color a role:

```
$themes: (
    'default': (
        'text': (
            'primary'    : $black,
            'secondary'  : darken($gray, 10),
            'tertiary'   : $gray
        ),
        'bg'             : #fff,
        'well'           : lighten($gray, 20),
        'border'         : lighten($gray, 20),
        'highlight'      : $gray
    ),
);

```

You can assign these colors in your CSS with the `color` mixin, like so:

```
.your-component {
    @include color('highlight', 'background-color');
}
```

This will generate selectors all the site's color schemes. If you need a specific color to place in your own selectors, you can use the `theme()` function, like this:

```
background-color: theme(bg, reverse);
```

The second parameter is optional, and theme() will default to the 'default' theme map.

*/

@import "libs";

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$black             : #332732;
$super_dark_purple : #4d384b;
$dark_purple       : #665664;
$gray_blue         : #8C9AA7;
$gray              : #DBD9DA;
$light_gray        : #F2F2F2;

// highlights
// -> access with mixin "chapter_highlights()" below
$highlights: (
    'blue'   : #5eabbc,
    'green'  : #5dc0ba,
    'red'    : #f3385a,
    'orange' : #f5a100,
    'purple' : #8d64aa,
);

$highlight--default: map-get($highlights, 'blue');

// Themes
// ----------------------------------------------------------------------
// -> PUBLIC, use these for color references

$themes: (
    'default': (
        'text': (
            'primary'     : $black,
            'secondary'   : $super_dark_purple,
            'tertiary'    : $gray_blue,
            'body'        : $dark_purple,
        ),
        'bg'              : #fff,
        'well'            : $light_gray,
        'border'          : $gray,
        'highlight'       : $highlight--default,
    ),
    'reverse': (
        'text': (
            'primary'     : #fff,
            'secondary'   : lighten($gray_blue, 10),
            'tertiary'    : lighten($super_dark_purple, 35),
            'body'        : $light_gray,
        ),
        'bg'              : $super_dark_purple,
        'well'            : $black,
        'border'          : lighten($super_dark_purple, 20),
        'highlight'       : $highlight--default,
    ),
    'wash': (
        'text': (
            'primary'     : #fff,
            'secondary'   : $black,
            'tertiary'    : $dark_purple,
            'body'        : $dark_purple,
        ),
        'bg'              : $highlight--default,
        'well'            : $dark_purple,
        'border'          : $super_dark_purple,
        'highlight'       : #fff,
    )
);

// "get" function to access theme map values
// -> PUBLIC
// -> USAGE:
//      color: theme('text' 'primary');
//      color: theme('highlight', 'reverse');
@function theme($colors, $name: 'default') {
    // first extract the 'theme' nested map
    $theme: map-get($themes, $name);

    // now get the nested map for the first color value
    $color: map-get($theme, nth($colors, 1));
    // @debug "#{$name}: #{$colors} - #{map-get($theme, nth($colors, 1))}";

    // if there's more than one color string in the $colors list, dig deeper
    @if length($colors) > 1 {
        @for $i from 2 through length($colors) {
            // keep updating $color with the next nested map until we've reached the end of the list
            $color: map-get($color, nth($colors, $i));
            // @debug(nth($colors, 1), $i);
        }
    }
    // @debug(type-of($color));
    @return $color;
}

// add colors for each theme
// -> PUBLIC
// -> USAGE:
//      @include color(text primary, background-color);
@mixin color($color, $attr: color, $important: false) {
    // set color for default theme
    #{$attr}: theme($color)#{if($important != false, " !important", "")};

    // set the color of this element to match the theme of this context
    @each $theme, $colors in $themes {
        // @debug($theme);
        @if $theme != "default" {
            // set color to theme of either this element or its parent
            &.c-theme-#{$theme}, .c-theme-#{$theme} & {
                #{$attr}: theme($color, $theme)#{if($important != false, " !important", "")};
            }
        }
    }
}

// Theme Globals
// ----------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
    color: theme('text' 'secondary', $theme);
    background-color: theme('bg', $theme);
    border-color: theme('border', $theme) !important;

    // highlight color when you select something
    ::selection {
      background: theme('highlight', $theme);
      color: #fff;
      text-shadow: none;
    }

    // ditto, for mozilla engine
    ::-moz-selection {
      background: theme('highlight', $theme);
      color: #fff;
      text-shadow: none;
    }
}

/* Themes
// -> use the helper class to apply a theme to a module
// -------------------------------------------------------------------------- */

body, .c-theme-default, %theme--default {
    @include theme('default');
}

// create utility classes for each color theme from the $themes map
// e.g. ".c-theme-reverse" and ".c-theme-wash"
@each $theme, $colors in $themes {
    @if $theme != "default" {
        .c-theme-#{$theme} { @include theme('#{$theme}'); }
    }
}


/* Helper classes
// -> use on individual elements to apply special color treatment
// -------------------------------------------------------------------------- */

.c-text-primary { @include color('text' 'primary', $important: true); }
.c-text-secondary { @include color('text' 'secondary', $important: true); }
.c-text-tertiary { @include color('text' 'tertiary', $important: true); }

.c-highlight { @include color('highlight', $important: true); }
.c-highlight-bg { @include color('highlight', 'background-color'); }

.c-accent { @include color('accent', $important: true); }
.c-accent-bg { @include color('accent', 'background-color'); }

.c-well { @include color('well', 'background-color'); }

.c-bg { @include color('bg'); }

// kill background colors in print
// -> note all elements are set to color: black in base/_print.scss
@media print {
    [class^="c-"] { background-color: transparent !important; }
}
